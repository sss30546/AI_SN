#!/usr/bin/env python3

import os
import json
import datetime
import streamlit as st
from groq import Groq
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î API KEY
load_dotenv(".env")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
client = Groq(api_key=GROQ_API_KEY)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
def ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢(‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å):
    ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = datetime.date.today()
    ‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ = (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å).days
    ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤ = 13 + 7
    return max(0, ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤ - ‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ)

# ‡πÅ‡∏ä‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def chatboot(question):
    system_prompt = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô...

[...‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...]

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
User: "‡∏Ñ‡πà‡∏≤ pH 6.2, ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏ã‡πå 12, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô 35N, ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡πÅ‡∏£‡∏á, ‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß 2 ‡∏ß‡∏±‡∏ô"
Answer:
{
  "ripeness": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å",
  "brix": 12,
  "ph": 6.2,
  "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠": 35,
  "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢": 16,
  "reason": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 6 ‡∏°‡∏¥‡∏ï‡∏¥ ‡∏û‡∏ö‡∏ß‡πà‡∏≤ pH, Brix ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á 2 ‡∏ß‡∏±‡∏ô‡∏à‡∏∂‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å 16 ‡∏ß‡∏±‡∏ô"
}
    """
    response = client.chat.completions.create(
        model="llama-3.1-8b-instant",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        temperature=0.2,
        max_tokens=1024,
    )
    return response.choices[0].message.content.strip()

# ----------------- UI -------------------
def main():
    st.set_page_config(page_title="AI Melon Ripeness Bot", page_icon="üçà", layout="wide")
    st.title("üçà ‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ï‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
    st.subheader("‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô ‡∏î‡πâ‡∏ß‡∏¢ AI")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [
            {"role": "assistant", "content": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö... ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 6 ‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!"}
        ]

    with st.form("chat_form"):
        query = st.text_input("üó£Ô∏è ‡∏Ñ‡∏∏‡∏ì:", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô pH 6.2, Brix 10, ...").strip()
        submitted = st.form_submit_button("üöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

        if submitted and query:
            answer = chatboot(query)
            st.session_state["messages"].append({"role": "user", "content": query})
            st.session_state["messages"].append({"role": "assistant", "content": answer})
        elif submitted and not query:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á")

    for msg in st.session_state["messages"]:
        if msg["role"] == "user":
            st.markdown(f"**üßë‚Äçüåæ ‡∏Ñ‡∏∏‡∏ì:** {msg['content']}")
        else:
            try:
                data = json.loads(msg["content"])
                st.markdown("#### ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏°‡∏•‡∏≠‡∏ô")
                col1, col2 = st.columns(2)
                col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å", data.get("ripeness", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                col1.metric("‡∏Ñ‡πà‡∏≤ Brix", data.get("brix", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                col2.metric("pH", data.get("ph", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                col2.metric("‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤", data.get("‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))

                if data.get("ripeness") == "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÑ‡∏î‡πâ":
                    st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: " + data.get("reason", ""))
                else:
                    st.info(data.get("reason", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"))
            except Exception:
                st.markdown(f"**ü§ñ ‡∏ö‡∏≠‡∏ó:** {msg['content']}")

    st.markdown("---")
    st.caption("üå± ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏° Sn.Guardian gen X")

if __name__ == "__main__":
    main()
