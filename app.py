#!/usr/bin/env python3

import os
import json
import streamlit as st
import datetime
from groq import Groq
from dotenv import load_dotenv

st.set_page_config(page_title="AI Melon Ripeness Bot", page_icon="üçà", layout="wide")

# ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
load_dotenv(".env")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
client = Groq(api_key=GROQ_API_KEY)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
def ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß):
    ‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ß‡∏° = 14
    try:
        ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß = int(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
        ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = max(0, ‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ß‡∏° - ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
        return ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    except:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥(data):
    keys = ["ph", "brix", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡∏≠‡∏ô", "‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô", "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢"]
    return sum(1 for k in keys if data.get(k) is not None)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM
def chatboot(question):
    system_prompt = """ 
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô... [‡∏¢‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö, ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà]
    """
    response = client.chat.completions.create(
        model="llama-3.1-8b-instant",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        temperature=0.2,
        max_tokens=1024,
    )
    return response.choices[0].message.content.strip()

# UI ‡∏´‡∏•‡∏±‡∏Å
def main():
    st.markdown("""
        <style>
        body { background-color: #000000; }
        .stForm { background-color: #000000; padding: 2rem; border-radius: 12px; }
        </style>
    """, unsafe_allow_html=True)

    st.title("üçà ‡πÅ‡∏ä‡∏ï‡∏ö‡∏≠‡∏ï‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
    st.subheader("‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô ‡∏î‡πâ‡∏ß‡∏¢ AI")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [
            {"role": "assistant", "content": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤‡∏ß ‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏°‡∏¥‡∏ï‡∏¥..."}
        ]

    with st.form("chat_form"):
        query = st.text_input("üó£Ô∏è ‡∏Ñ‡∏∏‡∏ì:", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...").strip()
        submitted = st.form_submit_button("üöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

        if submitted and query:
            answer = chatboot(query)
            st.session_state["messages"].append({"role": "user", "content": query})
            st.session_state["messages"].append({"role": "assistant", "content": answer})
        elif submitted and not query:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á")

    for msg in st.session_state["messages"]:
        if msg["role"] == "user":
            st.markdown(f"**üßë‚Äçüåæ ‡∏Ñ‡∏∏‡∏ì:** {msg['content']}")
        else:
            try:
                data = json.loads(msg["content"])

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏°‡∏µ
                ‡∏°‡∏¥‡∏ï‡∏¥‡∏°‡∏µ = ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥(data)
                if ‡∏°‡∏¥‡∏ï‡∏¥‡∏°‡∏µ < 3:
                    data["ripeness"] = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÑ‡∏î‡πâ"
                    ‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = {
                        "ph": "‡∏Ñ‡πà‡∏≤ pH",
                        "brix": "‡∏Ñ‡πà‡∏≤ Brix",
                        "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠",
                        "‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡∏≠‡∏ô": "‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô",
                        "‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô": "‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô",
                        "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢": "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤"
                    }
                    ‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î = [‡∏ä‡∏∑‡πà‡∏≠ for key, ‡∏ä‡∏∑‡πà‡∏≠ in ‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î.items() if data.get(key) is None]
                    data["reason"] = (
                        f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {‡∏°‡∏¥‡∏ï‡∏¥‡∏°‡∏µ} ‡∏°‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å 6 ‡∏°‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ "
                        f"‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ: {', '.join(‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î)}"
                    )

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                with st.container():
                    st.markdown("#### ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏°‡∏•‡∏≠‡∏ô")
                    col1, col2 = st.columns(2)
                    col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Å", data.get("ripeness", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô", data.get("brix", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col2.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", data.get("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col2.metric("‡∏Ñ‡πà‡∏≤ pH", data.get("ph", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠(data.get("‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢"))
                    col2.metric("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢", f"{‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠} ‡∏ß‡∏±‡∏ô" if ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ is not None else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                    col2.metric("‡∏Å‡∏•‡∏¥‡πà‡∏ô", data.get("‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏°‡∏•‡πà‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    col2.metric("‡∏™‡∏µ", data.get("‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
                    st.info(data.get("reason", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"))
            except Exception:
                st.markdown(f"**ü§ñ ‡∏≠‡∏≠‡∏á‡∏ï‡∏≠‡∏á:** {msg['content']}")

    st.markdown("---")

if __name__ == "__main__":
    main()
